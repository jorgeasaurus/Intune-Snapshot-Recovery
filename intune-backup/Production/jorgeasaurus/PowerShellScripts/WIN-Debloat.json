{
    "@odata.context":  "https://graph.microsoft.com/beta/$metadata#deviceManagement/deviceManagementScripts(assignments())/$entity",
    "@odata.type":  "#microsoft.graph.deviceManagementScript",
    "@odata.id":  "deviceManagement/deviceManagementScripts(\u00272cc8e8be-6936-4851-81b5-afa40bc181aa\u0027)",
    "@odata.editLink":  "deviceManagement/deviceManagementScripts(\u00272cc8e8be-6936-4851-81b5-afa40bc181aa\u0027)",
    "enforceSignatureCheck":  false,
    "runAs32Bit":  false,
    "id":  "2cc8e8be-6936-4851-81b5-afa40bc181aa",
    "displayName":  "WIN-Debloat",
    "description":  "",
    "scriptContent@odata.type":  "#Binary",
    "scriptContent":  "",
    "createdDateTime@odata.type":  "#DateTimeOffset",
    "createdDateTime":  "2025-07-08T16:17:18.2680083Z",
    "lastModifiedDateTime@odata.type":  "#DateTimeOffset",
    "lastModifiedDateTime":  "2025-07-08T16:17:18.2680083Z",
    "runAsAccount@odata.type":  "#microsoft.graph.runAsAccountType",
    "runAsAccount":  "system",
    "fileName":  "RemoveBloat.ps1",
    "roleScopeTagIds@odata.type":  "#Collection(String)",
    "roleScopeTagIds":  [
                            "0"
                        ],
    "assignments@odata.context":  "https://graph.microsoft.com/beta/$metadata#deviceManagement/deviceManagementScripts(\u00272cc8e8be-6936-4851-81b5-afa40bc181aa\u0027)/assignments",
    "assignments@odata.associationLink":  "https://graph.microsoft.com/beta/deviceManagement/deviceManagementScripts(\u00272cc8e8be-6936-4851-81b5-afa40bc181aa\u0027)/assignments/$ref",
    "assignments@odata.navigationLink":  "https://graph.microsoft.com/beta/deviceManagement/deviceManagementScripts(\u00272cc8e8be-6936-4851-81b5-afa40bc181aa\u0027)/assignments",
    "assignments":  [
                        {
                            "@odata.type":  "#microsoft.graph.deviceManagementScriptAssignment",
                            "@odata.id":  "deviceManagement/deviceManagementScripts(\u00272cc8e8be-6936-4851-81b5-afa40bc181aa\u0027)/assignments(\u00272cc8e8be-6936-4851-81b5-afa40bc181aa%3Aadadadad-808e-44e2-905a-0b7873a8a531\u0027)",
                            "@odata.editLink":  "deviceManagement/deviceManagementScripts(\u00272cc8e8be-6936-4851-81b5-afa40bc181aa\u0027)/assignments(\u00272cc8e8be-6936-4851-81b5-afa40bc181aa%3Aadadadad-808e-44e2-905a-0b7873a8a531\u0027)",
                            "id":  "2cc8e8be-6936-4851-81b5-afa40bc181aa:adadadad-808e-44e2-905a-0b7873a8a531",
                            "target":  {
                                           "@odata.type":  "#microsoft.graph.allDevicesAssignmentTarget",
                                           "deviceAndAppManagementAssignmentFilterId":  null,
                                           "deviceAndAppManagementAssignmentFilterType@odata.type":  "#microsoft.graph.deviceAndAppManagementAssignmentFilterType",
                                           "deviceAndAppManagementAssignmentFilterType":  "none"
                                       }
                        }
                    ],
    "deviceRunStates@odata.associationLink":  "https://graph.microsoft.com/beta/deviceManagement/deviceManagementScripts(\u00272cc8e8be-6936-4851-81b5-afa40bc181aa\u0027)/deviceRunStates/$ref",
    "deviceRunStates@odata.navigationLink":  "https://graph.microsoft.com/beta/deviceManagement/deviceManagementScripts(\u00272cc8e8be-6936-4851-81b5-afa40bc181aa\u0027)/deviceRunStates",
    "groupAssignments@odata.associationLink":  "https://graph.microsoft.com/beta/deviceManagement/deviceManagementScripts(\u00272cc8e8be-6936-4851-81b5-afa40bc181aa\u0027)/groupAssignments/$ref",
    "groupAssignments@odata.navigationLink":  "https://graph.microsoft.com/beta/deviceManagement/deviceManagementScripts(\u00272cc8e8be-6936-4851-81b5-afa40bc181aa\u0027)/groupAssignments",
    "runSummary@odata.associationLink":  "https://graph.microsoft.com/beta/deviceManagement/deviceManagementScripts(\u00272cc8e8be-6936-4851-81b5-afa40bc181aa\u0027)/runSummary/$ref",
    "runSummary@odata.navigationLink":  "https://graph.microsoft.com/beta/deviceManagement/deviceManagementScripts(\u00272cc8e8be-6936-4851-81b5-afa40bc181aa\u0027)/runSummary",
    "userRunStates@odata.associationLink":  "https://graph.microsoft.com/beta/deviceManagement/deviceManagementScripts(\u00272cc8e8be-6936-4851-81b5-afa40bc181aa\u0027)/userRunStates/$ref",
    "userRunStates@odata.navigationLink":  "https://graph.microsoft.com/beta/deviceManagement/deviceManagementScripts(\u00272cc8e8be-6936-4851-81b5-afa40bc181aa\u0027)/userRunStates",
    "#microsoft.graph.assign":  {
                                    "title":  "microsoft.graph.assign",
                                    "target":  "https://graph.microsoft.com/beta/deviceManagement/deviceManagementScripts(\u00272cc8e8be-6936-4851-81b5-afa40bc181aa\u0027)/microsoft.graph.assign"
                                }
}
