name: Intune Export - Parameterized

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      export_path:
        description: 'Export path for backup files'
        required: false
        default: '.\intune-backup'
        type: string
      name_filter:
        description: 'Name filter for exported objects'
        required: false
        default: ''
        type: string
      add_object_type:
        description: 'Add object type to exported files'
        required: false
        default: true
        type: boolean
      export_assignments:
        description: 'Export assignments'
        required: false
        default: true
        type: boolean
      add_company_name:
        description: 'Add company name to exported files'
        required: false
        default: true
        type: boolean
      export_scripts:
        description: 'Export PowerShell scripts'
        required: false
        default: true
        type: boolean
      export_application_files:
        description: 'Export application files'
        required: false
        default: false
        type: boolean
      object_types:
        description: 'Comma-separated list of object types to export (leave empty for all)'
        required: false
        default: ''
        type: string
      intune_management_version:
        description: 'IntuneManagement tool version/tag'
        required: false
        default: '3.9.8'
        type: string
      commit_message_prefix:
        description: 'Prefix for commit message'
        required: false
        default: 'Intune backup'
        type: string

jobs:
  intune-export:
    runs-on: windows-latest
    steps:
      # 1. Check out the current repo
      - uses: actions/checkout@v4

      # 2. Check out the IntuneManagement tool
      - uses: actions/checkout@v4
        with:
          repository: Micke-K/IntuneManagement
          path: ./IntuneManagement
          ref: ${{ inputs.intune_management_version }}

      # 3. Generate dynamic BulkExport.json configuration
      - name: Generate BulkExport Configuration
        run: |
          # Define all available object types
          $allObjectTypes = @(
            "AdministrativeTemplates",
            "ADMXFiles",
            "AndroidOEMConfig",
            "AppConfigurationManagedApp",
            "AppConfigurationManagedDevice",
            "AppProtection",
            "AppleEnrollmentTypes",
            "Applications",
            "AuthenticationContext",
            "AuthenticationStrengths",
            "AutoPilot",
            "AzureBranding",
            "CoManagementSettings",
            "CompliancePolicies",
            "CompliancePoliciesV2",
            "ComplianceScripts",
            "ConditionalAccess",
            "MacCustomAttributes",
            "DeviceConfiguration",
            "DriverUpdateProfiles",
            "EndpointSecurity",
            "EnrollmentRestrictions",
            "EnrollmentStatusPage",
            "FeatureUpdates",
            "AssignmentFilters",
            "DeviceHealthScripts",
            "IntuneBranding",
            "NamedLocations",
            "Notifications",
            "PolicySets",
            "QualityUpdates",
            "ReusableSettings",
            "RoleDefinitions",
            "ScopeTags",
            "PowerShellScripts",
            "MacScripts",
            "SettingsCatalog",
            "TermsAndConditions",
            "TermsOfUse",
            "UpdatePolicies",
            "W365ProvisioningPolicies",
            "W365UserSettings"
          )
          
          # Parse selected object types
          $selectedTypes = if ("${{ inputs.object_types }}" -eq "") {
            $allObjectTypes
          } else {
            "${{ inputs.object_types }}" -split "," | ForEach-Object { $_.Trim() }
          }
          
          # Create configuration object
          $config = @{
            BulkExport = @(
              @{
                Name = "txtExportPath"
                Value = "${{ inputs.export_path }}"
              },
              @{
                Name = "txtExportNameFilter"
                Value = "${{ inputs.name_filter }}"
              },
              @{
                Name = "chkAddObjectType"
                Value = [bool]::Parse("${{ inputs.add_object_type }}")
              },
              @{
                Name = "chkExportAssignments"
                Value = [bool]::Parse("${{ inputs.export_assignments }}")
              },
              @{
                Name = "chkAddCompanyName"
                Value = [bool]::Parse("${{ inputs.add_company_name }}")
              },
              @{
                Name = "chkExportScript"
                Value = [bool]::Parse("${{ inputs.export_scripts }}")
              },
              @{
                Name = "chkExportApplicationFile"
                Value = [bool]::Parse("${{ inputs.export_application_files }}")
              },
              @{
                Name = "ObjectTypes"
                Type = "Custom"
                ObjectTypes = $selectedTypes
              }
            )
          }
          
          # Convert to JSON and save with UTF-8 encoding
          $jsonContent = $config | ConvertTo-Json -Depth 10 -Compress:$false
          [System.IO.File]::WriteAllText("$PWD\BulkExport_Generated.json", $jsonContent, [System.Text.Encoding]::UTF8)
          
          Write-Host "Generated BulkExport configuration:"
          Write-Host "Export Path: ${{ inputs.export_path }}"
          Write-Host "Name Filter: ${{ inputs.name_filter }}"
          Write-Host "Add Object Type: ${{ inputs.add_object_type }}"
          Write-Host "Export Assignments: ${{ inputs.export_assignments }}"
          Write-Host "Add Company Name: ${{ inputs.add_company_name }}"
          Write-Host "Export Scripts: ${{ inputs.export_scripts }}"
          Write-Host "Export Application Files: ${{ inputs.export_application_files }}"
          Write-Host "Selected Object Types: $($selectedTypes -join ', ')"
        shell: powershell

      # 4. Clean out previous backup files
      - name: Remove old backup files
        run: |
          $backupDir = "${{ inputs.export_path }}"
          if (Test-Path $backupDir -PathType Container) {
            Write-Host "Removing old backup files from: $backupDir"
            Remove-Item $backupDir -Recurse -Force
          } else {
            Write-Host "Backup directory does not exist: $backupDir"
          }
        shell: powershell

      # 5. Run IntuneManagement export
      - name: Export Intune Configuration
        run: |
          Write-Host "Working directory: $(Get-Location)"
          
          # Check for generated configuration file
          $silentBatchFile = Get-ChildItem -filter "BulkExport_Generated.json" -File -ErrorAction SilentlyContinue
          if (-not $silentBatchFile) {
            Write-Host "BulkExport_Generated.json not found. Falling back to BulkExport.json"
            $silentBatchFile = Get-ChildItem -filter "BulkExport.json" -Recurse -File -ErrorAction SilentlyContinue
            if (-not $silentBatchFile) {
              Write-Error "Neither BulkExport_Generated.json nor BulkExport.json found."
              exit 1
            }
          }
          
          # Validate JSON content
          try {
            $jsonContent = Get-Content $($silentBatchFile.FullName) | Out-String | ConvertFrom-Json
            Write-Host "Configuration file validation successful"
          } catch {
            Write-Error "Configuration file contains invalid JSON: $_"
            exit 1
          }
          
          # Set environment variables
          $Env:AAD_TENANT_ID = "${{ secrets.AZURE_TENANT_ID }}"
          $Env:AAD_APP_ID = "${{ secrets.AZURE_CLIENT_ID }}"
          $Env:AAD_APP_SECRET = "${{ secrets.AZURE_CLIENT_SECRET }}"
          
          Write-Host "TenantId: $env:AAD_TENANT_ID"
          Write-Host "AppId: $env:AAD_APP_ID"
          Write-Host "AppSecret Length: $($env:AAD_APP_SECRET.Length)"
          
          # Prepare parameters for IntuneManagement
          $params = @{
            Silent           = $true
            Verbose          = $true
            SilentBatchFile  = $($silentBatchFile.FullName)
            TenantId         = $env:AAD_TENANT_ID
            AppId            = $env:AAD_APP_ID
            Secret           = $env:AAD_APP_SECRET
          }
          
          # Execute IntuneManagement export
          .\IntuneManagement\Start-IntuneManagement.ps1 @params
        shell: powershell

      # 6. Commit and push the backup to the repo
      - name: Commit Intune backup to repo
        uses: EndBug/add-and-commit@v9
        with:
          message: "${{ inputs.commit_message_prefix }}: ${{ github.run_number }} - ${{ github.event.repository.pushed_at }}"
          add: './*'
          default_author: github_actions
          fetch: --tags --force
          pathspec_error_handling: ignore
          push: true

      # 7. Clean up generated files
      - name: Cleanup generated files
        run: |
          if (Test-Path "BulkExport_Generated.json") {
            Remove-Item "BulkExport_Generated.json" -Force
            Write-Host "Cleaned up generated configuration file"
          }
        shell: powershell